import random

class SudokuSolver:
    """
    Class to solve a Sudoku board.

    Attributes:
    - board: list of lists
        The Sudoku board represented as a 9x9 grid. Empty cells are represented by 0.
    """

    def __init__(self, board):
        """
        Constructor to instantiate the SudokuSolver class.

        Parameters:
        - board: list of lists
            The initial Sudoku board to be solved.
            It should be a 9x9 grid represented as a list of lists.
            Empty cells should be represented by 0.
        """

        self.board = board

    def solve_sudoku(self):
        """
        Solves the Sudoku board using a backtracking algorithm.

        Returns:
        - bool:
            Returns True if the Sudoku board is solvable, False otherwise.
        """

        # Find an empty cell on the board
        empty_cell = self._find_empty_cell()

        # If there are no empty cells, the board is solved
        if not empty_cell:
            return True

        # Get the row and column of the empty cell
        row, col = empty_cell

        # Try different numbers from 1 to 9
        for num in range(1, 10):
            # Check if the number is valid in the current position
            if self._is_valid(num, row, col):
                # Place the number in the current position
                self.board[row][col] = num

                # Recursively solve the Sudoku board
                if self.solve_sudoku():
                    return True

                # If the current number leads to an unsolvable board, backtrack
                self.board[row][col] = 0

        # If no number can be placed in the current position, backtrack
        return False

    def _find_empty_cell(self):
        """
        Finds an empty cell (cell with value 0) on the Sudoku board.

        Returns:
        - tuple:
            Returns the row and column indices of the empty cell.
            If there are no empty cells, returns None.
        """

        for row in range(9):
            for col in range(9):
                if self.board[row][col] == 0:
                    return row, col

        return None

    def _is_valid(self, num, row, col):
        """
        Checks if a number is valid in the current position on the Sudoku board.

        Parameters:
        - num: int
            The number to be checked.
        - row: int
            The row index of the current position.
        - col: int
            The column index of the current position.

        Returns:
        - bool:
            Returns True if the number is valid in the current position, False otherwise.
        """

        # Check if the number is already present in the same row
        for i in range(9):
            if self.board[row][i] == num:
                return False

        # Check if the number is already present in the same column
        for i in range(9):
            if self.board[i][col] == num:
                return False

        # Check if the number is already present in the same 3x3 box
        box_row = (row // 3) * 3
        box_col = (col // 3) * 3
        for i in range(3):
            for j in range(3):
                if self.board[box_row + i][box_col + j] == num:
                    return False

        return True

    #sudoku_generator
    def generate_sudoku(difficulty=30):
        """
        Generates a new Sudoku puzzle with the specified difficulty.

        Parameters:
        - difficulty: int (optional)
            The difficulty of the Sudoku puzzle, represented by the number of empty cells.
            The default difficulty is 30.

        Returns:
        - tuple:
            Returns a tuple containing the original puzzle and its solution.
        """
        def remove_cells(board, num_cells_to_remove):
            cells_to_remove = random.sample(range(81), num_cells_to_remove)
            for cell in cells_to_remove:
                row = cell // 9
                col = cell % 9
                board[row][col] = 0

        # Create a solved Sudoku puzzle
        solver = SudokuSolver([[0 for _ in range(9)] for _ in range(9)])
        solver.solve_sudoku()
        solved_board = [row[:] for row in solver.board]

        # Create a puzzle by removing some cells
        puzzle_board = [row[:] for row in solved_board]
        remove_cells(puzzle_board, difficulty)

        return puzzle_board, solved_board

# Example usage of the updated SudokuSolver class:

# Generate a Sudoku puzzle with a specified difficulty (e.g., 30 empty cells)
original_puzzle, solved_puzzle = SudokuSolver.generate_sudoku(30)

print("Original Puzzle:")
for row in original_puzzle:
    print(row)

print("\nSolved Puzzle:")
for row in solved_puzzle:
    print(row)


